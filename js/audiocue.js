// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["cue", "audio", "debug"], function(Cue, Audio, debug) {
    var AudioCue;

    return AudioCue = (function(_super) {
      __extends(AudioCue, _super);

      function AudioCue(number, name) {
        if (number == null) {
          number = "";
        }
        if (name == null) {
          name = "";
        }
        this._loopEndHandler = __bind(this._loopEndHandler, this);
        this._endHandler = __bind(this._endHandler, this);
        this._loadHandler = __bind(this._loadHandler, this);
        AudioCue.__super__.constructor.call(this, number, name);
        this.audio = null;
        this.start = 0;
        this.end = 0;
        this.loopStart = 0;
        this.loopEnd = 0;
        this.numLoops = 0;
        debug.log("New AudioCue:", number, name);
      }

      AudioCue.prototype.setAudio = function(audio) {
        this.audio = audio;
        return this.audio.onLoad(this._loadHandler);
      };

      AudioCue.prototype.go = function() {
        debug.log("Go!", this.number, this.name);
        this.loop = 0;
        this._curLoopEnd = this.loopEnd;
        this._curEnd = this.end;
        this.audio.onPosition(this._curLoopEnd, this._loopEndHandler);
        this.audio.onPosition(this._curEnd, this._endHandler);
        this.audio.setPosition(this.start);
        return this.audio.play();
      };

      AudioCue.prototype.stop = function() {
        this.audio.stop();
        this.audio.clearOnPosition(this._curEndLoop);
        return this.audio.clearOnPosition(this._curEnd);
      };

      AudioCue.prototype._loadHandler = function() {
        this.start = 0;
        return this.end = this.audio.getDuration();
      };

      AudioCue.prototype._endHandler = function(pos) {
        return this.stop();
      };

      AudioCue.prototype._loopEndHandler = function(pos) {
        debug.log("End loop:", pos);
        if (this.loop < this.numLoops) {
          this.loop += 1;
          return this.audio.setPosition(this.loopStart);
        }
      };

      return AudioCue;

    })(Cue);
  });

}).call(this);
